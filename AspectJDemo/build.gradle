import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

buildscript {
    repositories {
        maven {url '../repo'}
        google()
        jcenter()
    }
    // tasks
    dependencies {
        // 让 as 使用 ajc 作为编译器编译代码
        classpath 'org.aspectj:aspectjtools:1.9.0'
        // 引入自定义插件
        classpath "com.sleticalboy:autotrack.android:1.0.1"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
// 使用自定义插件
apply plugin: 'com.sleticalboy.autotrack'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.sleticalboy.aspectj"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    // AspectJ
    implementation 'org.aspectj:aspectjrt:1.9.0'
}

final def tag = "AutoTrack "

project.android.applicationVariants.all { it ->
    if (!it.buildType.isDebuggable()) {
        println(tag + "Skipping non-debuggable build type '${it.buildType.name}'.")
        return
    }
    logger.debug(tag + "Start building '${it.buildType.name}'.")
    JavaCompile jc = it.javaCompile
    jc.doLast {
        final String[] args = [
                "-showWeaveInfo", "-1.5",
                "-inpath", jc.destinationDir.toString(),
                "-aspectpath", jc.classpath.asPath,
                "-d", jc.destinationDir.toString(),
                "-classpath", jc.classpath.asPath,
                "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)
        ]
        println(tag + "ajc args: " + Arrays.toString(args))
        final MessageHandler handler = new MessageHandler(true)
        new Main().run(args, handler)
        handler.getMessages(null, true).each {
            switch (it.kind) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    logger.error(tag + it.message, it.thrown)
                    break
                case IMessage.WARNING:
                    logger.warn(tag + it.message, it.thrown)
                    break
                case IMessage.INFO:
                    logger.info(tag + it.message, it.thrown)
                    break
                case IMessage.DEBUG:
                    logger.debug(tag + it.message, it.thrown)
                    break
            }
        }
    }
}